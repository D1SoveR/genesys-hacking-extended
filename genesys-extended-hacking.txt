EXTENDED HACKING
================

This document aims to expand upon mechanics suggested by "Hacking Rules" entry in GCRB (page 232), clear any doubts regarding the mechanics of creating and managing networks in hacking encounters, as well as expand upon handling of exclusively hacking-related encounters vs mixing the hacking and regular encounters.
Additionally, it provides example system designs, security programs and subsytems for the hacker/sysop to make use of.

TABLE OF CONTENTS:

1. Encounter mechanics
   1.1. Scope of the encounter (opposed vs unopposed, digital-only or mixed)
   1.2. General encounter flow (maneuvers and actions)
2. Integration (hackers and non-hackers)
   2.1. Mixing digital and physical combat
   2.2. Physical vs remote presence
3. Subsystem examples
   3.1. Security programs
   3.2. Subsystems
4. Character options
   4.1. Talents
   4.2. Equipment

1. ENCOUNTER MECHANICS
----------------------

Genesys is aimed at providing good narrative experience, and geared to put focus on exciting moments - the "rule of cool" applies through most of the gameplay one experiences in any Genesys setting. "Would you put it in a film/book" is another good rule of thumb to keep in mind when deciding what needs prolonged focus, and what can be reduced to short description or a single roll.

Consider how hacking is portrayed in media. In 1995's "Hackers", a cult classic in today's IT circles, focus is primarily on interaction between various characters, and the actual hacking reduced to short clips. Only towards the end of the film, which culminates in the entire hacker crew making the "big hit" on corporate servers, and battling the sinister Sysop, do we see hacking as an extended character action[1]; and unlike throughout the rest of the film, this hacking operation does not run unopposed - we see the back-and-forth of viruses, worms, sentries, and firewalls.
"Swordfish" is another example of hacker film which focuses primarily on dynamic action - hacking does not come into portrayal for any extended period of time. When the protagonist undergoes the test of his hacking abilities, we do not see the detailed process, methods used, prolonged trial-and-error that characterises hacking in real life - instead he's forced to get into FBI database in a minute with a gun to his head.

Realistic hacking is not exciting for most of the audience - and hacking in a role-playing game faces the same problems.
This chapter discusses how to handle the hacking in a way that's entertaining not only to the person playing the hacker, but also to the rest of the party; and how to use it in a way that meshes well with other aspects of gameplay.

[1] As cheesy as it is, with ridiculous animations and at least one character wearing VR goggles.

1.1. SCOPE OF THE ENCOUNTER
---------------------------

One of the first question to ask when giving the players a hacking opportunity is "do I want this as a whole encounter or a skill check?".
Both of the approaches have their application and seeing both in use is not only allowed, but recommended. Consider the following points:

SKILL CHECKS

Skill check hacking is compact, as the entire character action can be resolved with a single dice roll. It also doesn't require preparing a network for the hacker to break into, which can save a lot of time if the hacker character enjoys their "hacks of opportunity". Consider using skill checks:

 - When the scope of the action is narrow; the hacker is only set on doing one small thing, and nothing else
   (use them when the hacker wants to make the ATM spit out cash, open one set of electronic doors, decrypt a disc with sensitive information, etc.)
 - When the scope is wider, but the action involves doing the same/similar thing repeatedly and thus could potentially devolve into rolling for the same thing over and over; there is little in terms of narrative benefit to repeating the same activity
   (use them when digging through databases looking for information, when tracking targets on security cameras, when deploying security software across multiple machines)
 - When majority of the party cannot participate in the encounter; even if the complexity of the hacking task would make for a good encounter, one has to avoid the situation where one or two players do everything while the rest of the party sits around twiddling their thumbs

[ consider giving the player checks only if difficulty increases ]

ENCOUNTERS

The process of hacking can be expanded into its own part of the encounter, providing tension, and giving the hacker an opportunity to participate in more complex structured encounters, either on their own, or helping the party in real space (by mixing the hacking encounter parts into a party-wide encounter).
It involves mapping out the system into which the player is breaking, as the player's interaction with it becomes complex - rather than achieving the goal in a single roll, the player needs to gain access, scan the system for its capabilities, then proceed to gain access to them by breaking various security programs.

The hacker can move around the system akin to how the party of players moves around a physical location; gain access to subsystems and potentially assist the party (opening the doors, silencing alarms, shutting out security forces, or even fight with autonomous military equipment); or attempt to retrieve something from the system by disabling security software and scanning for information, while an opposing sysop is attempting to lock them out.

Consider using hacking encounters:

- When the scope of the action is wide; the hacker breaks in to perform a lot of different hacking actions within the same system
  (use them when the hacker assists the party in infiltrating secure facility, attempts to track getaway car while cutting off chase with traffic lights, or other similarly involved actions)
- When it is narratively important that the process of breaking into the system is long and complex, such as when under time pressure
  (use them when the hacker is breaking into secure database while on-site and the rest of the party keeps security at bay)
- When hacking allows the player to provide ongoing support, especially when the hacker is separate from the party - telepresence
  (use when the hacker uses law enforcement GPS beacons to give the players exact location of their pursuit, or similar situations)
- When there is active opposition; in form of the enemy sysop, counterhacker, or people trying to physically stop the hacker

Notice that most of these examples involve the hacker going through the hacking encounter while the rest of the players are also in an encounter.
Avoid using full encounters if the rest of the party does not get take part in the encounter - if only the hacker gets to perform cool feats of skill, and the rest of the party sits around twiddling their thumbs, use a single skill check instead. If narratively the hack is supposed to take longer time, consider declaring that the character starts working, and only rolls once at the end.

1.2. GENERAL ENCOUNTER FLOW
---------------------------

The hacking encounter is mostly carried out in a similar fashion to combat or social encounters, with each active character, be it the hacker, the opposing sysop, or advanced security software (the kind that can take active steps to kick the hacker out) taking their up to two manuevers and an action every turn.
The primary meter of character's viability is, similarly to social encounter, Strain rather than Wounds - unless something goes desperately wrong, the character should not become physically harmed as result of hacking failures (that of course does not extend to indirect harm, such as failing to shut down a security turret that then guns you down).
Once the character reaches their strain threshold, they are kicked out of the system; narratively, the hacker makes a crucial mistake and gets booted, or the sysop has his credentials revoked; mechanically, they are not able to access the system again until the Strain is brought below threshold. Strain can be inflicted as result of hacking failure, or at expense of Advantage/Threat.

Apart from those differences, the hacking encounters can play out in the exact same fahion as regular combat encounter:
all the involved characters roll for Initiative, then proceed to alternatively spend their manuevers and actions to either crack the system or defend it. For hackers, their main action will be overriding security, and their main manuever Enact Command (still limited to one per turn), whereas for defending side it will be restarting security software and attempting to lock the hacker out.
One aspect is worth mentioning, and that's awareness of the hack. By default, the defending side is not aware that the hack takes place, and until they do, the hacker acts alone against static system - it is only once the defender is made aware of the hack (through spending Threat or as a side effect of failing to override a security program) that they can act.

SYSTEM MAPPING

The system is generally speaking a collection of subsystems - the features or hardware controlled by the system - with at least some of those being protected by security programs.
The subsystem represents a self-contained capability of the system. It can be things like communication systems, security cameras, door control, or a database containing information. Each of the subsystems should provide the user with either knowledge or some new ability when accessed, such as seeing camera feeds, tapping into police radio chatter, or obtaining personnel dosiers.

Security program is an entity in the system that either protects a subsystem (meaning it has to be disabled before its corresponding subsystem can be accessed) or performs some sort of security action (like restarting security programs or actively tracing the hacker). Where subsystems can be thought of as rooms with equipment or loot in them, security programs are the trap-riddled doors leading to those rooms.
It is entirely valid for some subsystems not to have extra security - it can be assumed that when the hacker gains access to the system, they receive at least rudimentary security access; things like building access log, or personnel files. Other subsystems can have security only on part of their capability - like security camera feed being easy to access for viewing, but requiring special privileges for disabling, or looping footage.

When designing your system, consider what sort of fuctionality it should carry, and what sort of options should exist for the player to make use of.
Bank security, for example, may have internal e-mail systems behind low-grade security, alarms and vault security being medium-grade, and actual accounts behind several layers of military-grade security. Dedicated police database could have personnel records with no security, case files in unsecure memory, witness protection details in secure region, and evidence locker inventories.
The hacker should have the info of available subsystems from the moment they are in the system, but certain parts of it might not even be visible until some security software is disabled. This might want to be taken into consideration when hacking is carried out in process of retrieving information.

ACTIONS VS MANUEVERS

Most often, the two things the hacker can do in the system is Override Security Program and Enact Command.
The former is the process of disabling security on selected secure subsystem, in order to gain access to some capability provided by the system. The latter is a manuever/action done in order to actually use the subsystem, doing whatever it is that its capability allows for - tracking the team through security cameras, opening locked doors, or broadcasting free jazz through PSA systems.
Because the act of gaining access to the subsystem requires a skill check, and is thus an action, most of the subsystems should be usable with just a manuever - this is to limit the amount of dice rolls taken during the encounter, and speed up action.
Taking an Enact Command *action*, as opposed to manuever, should really be considered when using the system is narratively difficult enough to warrant another check, or if the action mimics an actual action to be taken by another player.

For example, scanning through camera feed to check if anyone's behind the corner is simple enough that it shouldn't require a skill check, we can do it as Enact Command *manuever*.
Opening an electronically locked door would normally require Hacking skill check, but since the user has already performed a Hacking skill check to gain access to door controls in the first place, additional rolls would be redundant - we should do it as Enact Command *manuever*.
Firing hacked security turret at an enemy is a direct attack, and should thus become Enact Command *action*, likely Gunnery skill check.

DISABLING SECURITY

Disabling security programs requires an extended or advanced display of skill, and is therefore an action. The same is not the case for the legitimate users of the system - enemy sysops can activate and deactivate security programs with just a manuever.
Once the security has been disabled, it stays disabled until it has been reactivated, either by active opposing force, or by another security program.
This can be used to tailor the difficulty of hacking encounters - on simple systems, or in situations where time spent hacking does not matter, security programs don't need to be reactivated; if the hacker can spend every other turn overriding security over and over again, there is very little benefit to have them roll for the same action repeatedly. When facing time constraints, though, having an agent in the system reactivating security can add additional element of tension and strategy to the encounter.
Disabled systems cannot be reactivated until the end of hacker's next turn - in that period of time, even if the opposing agent has the free manuevers to reactivate security, it is not possible - Advantage can be spent to extend the amount of time the security cannot be reactivated, and Triumph can be spent to permanently disable that particular security program until the end of the encounter. Once the security has been reactivated, the hacker loses access to that subsystem until it has been hacked into again.

3. INTEGRATION
--------------

Hacking makes for a really nice addition to sci-fi settings when handled properly, but it can occasionally be difficult to manage. The worlds of digital and physical rarely intermingle - and the hacking part of the gaming experience can isolate the hacker from non-hacker players, leading to boredom and lost momentum. One of the most common problems is how to include hacking in the session in such a way that does not leave other players twiddling their thumbs - it can be difficult both in the aspect of hackers having distinctly different set of abilities, and in the fact that they often operate remotely, literally separating them from the party.

3.1. MIXING DIGITAL AND PHYSICAL COMBAT
---------------------------------------

This point warrants reiteration - avoid creating hacker-only encounters (unless majority of the party is also hackers and can thus participate).
In terms of their position in the party, hackers are the support class - the mages of technological age, capable of providing buffs to their allies (hacking into security systems, coordinating communication, sometimes literally turning enemy materiel ally), hindering opponents (running comms interference, disabling alarms, locking people out or in), and obtaining information.

As such, one of the best ways to utilise hacking mechanics along with the rest of the party is to have the hacker break into systems in order to assist the party carrying out an operation, and to use the subsystems available to assist the party on their turn.
When hacking alongside any combat-related (or similarly structured) encounter, the easiest way is to consider the hacker (as well as any *active* hacking opposition, such as the sysop) as any other combatant: have them roll for initiative along with the rest of the party, and provide them with thier initiative slots. The hacking is performed as part of a regular combat in such event.

EXAMPLE #1

"Zero Cool" (our hacker) is assisting a group of mercenaries raiding a security checkpoint. There is a sniper in the watchtower, and apart from Zero, there's a countersniper in the group, one referred to as "Deadeye". Let's assume that the order of initiative is NPC, PC, PC.
On the first turn, the enemy sniper moves behind the side of the watch nest (first manuever) and unslings their sniper rifle, preparing for a shot (trading the action for second manuever). Then Zero sets up his remote hacking equipment (manuever for inventory management) and breaks into checkpoint's security network (Access System action). Deadeye goes into cover as well (first manuever) and takes a snap shot at the tower (combat action), but unfortunately ony hits cover.
On the second turn, the enemy sniper aims and attempts a shot, but misses as well. Then, Zero breaks the restrictions on feed circuits (Override Security Program action), gaining access to camera feed, and relays the feed from the watchtower directly to Deadeye's HUD, giving her the exact position of the niper behind cover, and providing her with Boost die (Enact Command manuever with results identical to Assist manuever). Deadeye adjusts for the wind and drop (Aim manuever) and shoots (with two Boost dice), neatly piercing the metal barrier and the enemy sniper's head.

EXAMPLE #2

Zero assists the prison extraction team remotely. As the team is pinned down by the security team, Zero needs to find a way of providing distraction so that his comrades can evacuate. He scans the system for location of any automated defence systems (Enact Command manuever) and finds the right nodes for stun gun turret right behind the security team. He manages to get manual firing access (Override Security Program action), but his brute force method causes some system-wide alerts, leading the sysop to investigate (three Threat spent to alert the admin).
Next turn, he uses the manual control of the turrets to spray the security forces with rubber bullets (Enact Command *action*, since it requires a Gunnery skill check), giving the team a brief respite. Note that he cannot perform an Enact Command manuever following his action this turn, since he's already performed the hacking action, and Enact Command is limited to one per turn.
Next turn, the sysop manages to reboot the turret system with, reactivating the security program. Zero cannot access it again until he disables the security again (Override Security Program action) and fires it next turn (Enact Command *action*). He instead elects to gain access to automated cell locks (action) and opens up the entire block (manuever), hoping the sudden riot will overwhelm the security mooks.

3. SUBSYSTEM EXAMPLES
---------------------

3.1. SECURITY PROGRAMS
----------------------

:: Watchdog ::

Core system component intended to reinforce the existing security measures by maintaining other services.
Deeply rooted, it monitors itself and other security services, restarting them if anything goes wrong.
Program Strength: 5
Effects: While active, it reactives one deactivated security program *eligible for activation* every turn, starting with the one that's been offline for longest. If two or more security programs become eligible for activation in the same turn, only one is reactivated. If a character attempts to override this program and fails, one additional security program may be reactivated.

GM notes:
This security measure can be used if the GM wants to keep the hacker character on their toes, but does not want to involve active opposition (sysop);
it will ensure that that security systems are only taken down temporarily, and thus the hacker should rush (or attempt to attack the watchdog itself, which is not supposed to be an easy feat, hence the high Program Strength).